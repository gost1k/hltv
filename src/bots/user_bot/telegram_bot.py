#!/usr/bin/env python
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)
"""

import os
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from src.bots.config import load_config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config('user')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(config['log_file'])
    ]
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = config['token']
DB_PATH = config['hltv_db_path']
SUBSCRIBERS_DB_PATH = config['subscribers_db_path']

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
MENU_UPCOMING_MATCHES = "–ë—É–¥—É—â–∏–µ –º–∞—Ç—á–∏"
MENU_COMPLETED_MATCHES = "–ü—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏"

class HLTVStatsBot:
    """
    –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV
    """
    def __init__(self, token, db_path, subscribers_db_path=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞
            db_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö HLTV
            subscribers_db_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        """
        self.token = token
        self.db_path = db_path
        self.subscribers_db_path = subscribers_db_path or SUBSCRIBERS_DB_PATH
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        self._init_subscribers_db()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
        self.menu_keyboard = [
            [KeyboardButton(MENU_COMPLETED_MATCHES)],
            [KeyboardButton(MENU_UPCOMING_MATCHES)]
        ]
        self.markup = ReplyKeyboardMarkup(self.menu_keyboard, resize_keyboard=True)
        
    def _get_safe_user_info(self, user):
        """
        –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
        –∏–∑–±–µ–≥–∞—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Unicode
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram
            
        Returns:
            str: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            first_name = user.first_name if user.first_name else ""
            last_name = user.last_name if user.last_name else ""
            username = user.username if user.username else "no_username"
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∏—Ö
            first_name = ''.join(c if ord(c) < 128 else '_' for c in first_name)
            last_name = ''.join(c if ord(c) < 128 else '_' for c in last_name)
            
            return f"User: {first_name} {last_name} (@{username}) [ID: {user.id}]"
        except:
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return f"User ID: {user.id}"
    
    async def error(self, update, context):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        """
        logger.error(f"–û—à–∏–±–∫–∞: {context.error} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {update}")
    
    def _init_subscribers_db(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        """
        try:
            conn = sqlite3.connect(self.subscribers_db_path)
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS subscribers (
                    chat_id INTEGER PRIMARY KEY,
                    first_name TEXT,
                    last_name TEXT,
                    username TEXT,
                    subscribed_date INTEGER,
                    is_active INTEGER DEFAULT 1
                )
            ''')
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {str(e)}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start")
        
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            f"/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
            f"/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            f"/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
            f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis'), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /help")
        
        message = (
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:\n\n"
            "/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            "/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis')."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        """
        message_text = update.message.text
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")
        
        if message_text == MENU_COMPLETED_MATCHES:
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π")
            await self.show_completed_matches(update, context)
        elif message_text == MENU_UPCOMING_MATCHES:
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π")
            await self.show_upcoming_matches(update, context)
        elif message_text == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.send_today_stats(update, context)
        elif message_text == "–ó–∞ –≤—á–µ—Ä–∞":
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞")
            await self.show_matches_for_period(update, context, 1)
        elif message_text == "–ó–∞ 3 –¥–Ω—è":
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ 3 –¥–Ω—è")
            await self.show_matches_for_period(update, context, 3)
        elif message_text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 0)
        elif message_text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            await self.show_upcoming_matches_for_period(update, context, 1)
        elif message_text == "–ù–∞ 3 –¥–Ω—è":
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ 3 –¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 3)
        elif message_text == "–ü–æ —Å–æ–±—ã—Ç–∏—é":
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
            await self.show_events_list(update, context)
        elif message_text == "–ù–∞–∑–∞–¥":
            logger.info(f"{user_info} - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_menu(update, context)
        elif 'match_mapping' in context.user_data and message_text in context.user_data['match_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            match_id = context.user_data['match_mapping'][message_text]
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ ID {match_id}")
            await self.show_match_details(update, context, match_id)
        elif 'event_mapping' in context.user_data and message_text in context.user_data['event_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            event_id = context.user_data['event_mapping'][message_text]
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
            await self.show_matches_for_event(update, context, event_id)
        elif "(" in message_text and ")" in message_text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å ID –≤ —Å–∫–æ–±–∫–∞—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Ç—á–∞ –∏–∑ —Å–∫–æ–±–æ–∫
                match_id_text = message_text.split("(")[-1].split(")")[0].strip()
                match_id = int(''.join(filter(str.isdigit, match_id_text)))
                await self.show_match_details(update, context, match_id)
            except (ValueError, IndexError):
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞.",
                    reply_markup=self.markup
                )
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            team_name = message_text.strip()
            if len(team_name) >= 2:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                await self.find_matches_by_team(update, context, team_name)
            else:
                await update.message.reply_text(
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.\n"
                    "–î–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é –Ω–∞–±–µ—Ä–∏—Ç–µ /menu\n"
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∞–±–µ—Ä–∏—Ç–µ /help\n"
                    "–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤) –¥–ª—è –ø–æ–∏—Å–∫–∞ –µ—ë –º–∞—Ç—á–µ–π.",
                    reply_markup=self.markup
                )
    
    async def show_completed_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ–Ω—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['showing_menu'] = MENU_COMPLETED_MATCHES
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –º–∞—Ç—á–µ–π
        keyboard = [
            [KeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("–ó–∞ –≤—á–µ—Ä–∞")],
            [KeyboardButton("–ó–∞ 3 –¥–Ω—è")],
            [KeyboardButton("–ü–æ —Å–æ–±—ã—Ç–∏—é")],
            [KeyboardButton("–ù–∞–∑–∞–¥")]
        ]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π:",
            reply_markup=markup
        )
    
    async def show_upcoming_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –º–µ–Ω—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['showing_menu'] = MENU_UPCOMING_MATCHES
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –º–∞—Ç—á–µ–π
        keyboard = [
            [KeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞")],
            [KeyboardButton("–ù–∞ 3 –¥–Ω—è")],
            [KeyboardButton("–ü–æ —Å–æ–±—ã—Ç–∏—é")],
            [KeyboardButton("–ù–∞–∑–∞–¥")]
        ]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π:",
            reply_markup=markup
        )
    
    async def subscribe(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        """
        chat_id = update.effective_chat.id
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É")
        
        try:
            conn = sqlite3.connect(self.subscribers_db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫
            cursor.execute('SELECT is_active FROM subscribers WHERE chat_id = ?', (chat_id,))
            result = cursor.fetchone()
            
            if result:
                if result[0] == 1:
                    await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É! üëç")
                    conn.close()
                    return
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –æ—Ç–ø–∏—Å–∞–Ω —Ä–∞–Ω–µ–µ
                    cursor.execute(
                        'UPDATE subscribers SET is_active = 1, subscribed_date = ? WHERE chat_id = ?',
                        (int(datetime.now().timestamp()), chat_id)
                    )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
                cursor.execute(
                    'INSERT INTO subscribers (chat_id, first_name, last_name, username, subscribed_date, is_active) VALUES (?, ?, ?, ?, ?, 1)',
                    (
                        chat_id,
                        user.first_name,
                        user.last_name,
                        user.username,
                        int(datetime.now().timestamp())
                    )
                )
            
            conn.commit()
            conn.close()
            
            await update.message.reply_text(
                "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π! üéÆ\n"
                "–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∑–∞ –ø—Ä–æ—à–µ–¥—à–∏–π –¥–µ–Ω—å."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def unsubscribe(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
        """
        chat_id = update.effective_chat.id
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏")
        
        try:
            conn = sqlite3.connect(self.subscribers_db_path)
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫
            cursor.execute('SELECT is_active FROM subscribers WHERE chat_id = ?', (chat_id,))
            result = cursor.fetchone()
            
            if result and result[0] == 1:
                # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('UPDATE subscribers SET is_active = 0 WHERE chat_id = ?', (chat_id,))
                conn.commit()
                await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏. üëã")
            else:
                await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É.")
            
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {str(e)}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def get_matches_by_date(self, date_start, date_end):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –º–∞—Ç—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            date_start (int): –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            date_end (int): –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        """
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            cursor.execute('''
                SELECT 
                    m.match_id, m.datetime, 
                    m.team1_id, m.team1_name, m.team1_score, m.team1_rank,
                    m.team2_id, m.team2_name, m.team2_score, m.team2_rank,
                    m.event_id, m.event_name
                FROM match_details m
                WHERE m.status = 'completed'
                AND m.datetime BETWEEN ? AND ?
                ORDER BY m.event_id, m.datetime
            ''', (date_start, date_end))
            
            matches = cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
            events = {}
            for match in matches:
                event_id = match['event_id']
                event_name = match['event_name']
                
                if event_id not in events:
                    events[event_id] = {
                        'name': event_name,
                        'matches': []
                    }
                
                events[event_id]['matches'].append({
                    'match_id': match['match_id'],
                    'datetime': match['datetime'],
                    'team1_id': match['team1_id'],
                    'team1_name': match['team1_name'],
                    'team1_score': match['team1_score'],
                    'team2_id': match['team2_id'],
                    'team2_name': match['team2_name'],
                    'team2_score': match['team2_score']
                })
            
            conn.close()
            return events
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π: {str(e)}")
            return {}
    
    def format_matches_message(self, events):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç—á–∞–º–∏
        
        Args:
            events (dict): –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –º–∞—Ç—á–∞–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not events:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        
        message = ""
        
        for event_id, event_data in events.items():
            event_name = event_data['name'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            matches = event_data['matches']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            message += f"üèÜ <b>{event_name}</b>\n\n"
            
            for match in matches:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
                team1_name = match['team1_name'] 
                team2_name = match['team2_name']
                team1_score = match['team1_score']
                team2_score = match['team2_score']
                match_id = match['match_id']
                
                # –í—ã–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if team1_score > team2_score:
                    team1_name = f"<b>{team1_name}</b>"
                    team2_name = f"{team2_name}"
                elif team2_score > team1_score:
                    team1_name = f"{team1_name}"
                    team2_name = f"<b>{team2_name}</b>"
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                message += f"‚Ä¢ <code>{team1_name}</code> {team1_score} : {team2_score} <code>{team2_name}</code>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            message += "\n"
        
        return message
    
    async def send_yesterday_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        await self.show_matches_for_period(update, context, 1)
    
    async def send_today_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        today = datetime.now()
        start_of_today = datetime(today.year, today.month, today.day, 0, 0, 0).timestamp()
        end_of_today = datetime(today.year, today.month, today.day, 23, 59, 59).timestamp()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        events = self.get_matches_by_date(start_of_today, end_of_today)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∑–∞ {today.strftime('%d.%m.%Y')}</b>\n\n"
        message += self.format_matches_message(events)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        match_count = sum(len(event_data['matches']) for event_data in events.values()) if events else 0
        logger.info(f"{user_info} - –ù–∞–π–¥–µ–Ω–æ {match_count} –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
    
    async def show_matches_for_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE, days=1):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å)
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        
        today = datetime.now()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
        end_date = datetime(today.year, today.month, today.day, 0, 0, 0) - timedelta(days=1)
        end_timestamp = end_date.timestamp() + 86399  # –ö–æ–Ω–µ—Ü –¥–Ω—è (23:59:59)
        start_date = end_date - timedelta(days=days-1)
        start_timestamp = start_date.timestamp()
        
        logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        events = self.get_matches_by_date(start_timestamp, end_timestamp)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        match_count = sum(len(event_data['matches']) for event_data in events.values()) if events else 0
        logger.info(f"{user_info} - –ù–∞–π–¥–µ–Ω–æ {match_count} –º–∞—Ç—á–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        
        if days == 1:
            period_text = f"–∑–∞ {end_date.strftime('%d.%m.%Y')}"
        else:
            period_text = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π {period_text}</b>\n\n"
        message += self.format_matches_message(events)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
    
    async def show_events_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è (–ø—Ä–æ—à–µ–¥—à–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)
        if hasattr(context, 'user_data') and 'showing_menu' in context.user_data:
            event_type = context.user_data['showing_menu']
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
            event_type = MENU_COMPLETED_MATCHES
            context.user_data['showing_menu'] = event_type
        
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ç–∏–ø–∞ {event_type}")
        
        today = datetime.now()
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            if event_type == MENU_COMPLETED_MATCHES:
                # –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π - —Å–º–æ—Ç—Ä–∏–º –Ω–∞–∑–∞–¥ –Ω–∞ 7 –¥–Ω–µ–π
                start_date = today - timedelta(days=7)
                start_timestamp = start_date.timestamp()
                end_timestamp = today.timestamp()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('''
                    SELECT DISTINCT event_id, event_name 
                    FROM match_details
                    WHERE datetime BETWEEN ? AND ?
                    AND event_id IS NOT NULL
                    AND event_name IS NOT NULL
                    AND status = 'completed'
                    ORDER BY event_name
                ''', (start_timestamp, end_timestamp))
            else:  # MENU_UPCOMING_MATCHES
                # –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π - —Å–º–æ—Ç—Ä–∏–º –≤–ø–µ—Ä–µ–¥ –Ω–∞ 14 –¥–Ω–µ–π
                start_timestamp = today.timestamp()
                end_date = today + timedelta(days=14)
                end_timestamp = end_date.timestamp()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('''
                    SELECT DISTINCT event_id, event_name 
                    FROM match_upcoming
                    WHERE datetime BETWEEN ? AND ?
                    AND event_id IS NOT NULL
                    AND event_name IS NOT NULL
                    ORDER BY event_name
                ''', (start_timestamp, end_timestamp))
            
            events = cursor.fetchall()
            conn.close()
            
            if not events:
                period_str = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é" if event_type == MENU_COMPLETED_MATCHES else "–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π"
                await update.message.reply_text(
                    f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏—è—Ö {period_str}.",
                    reply_markup=self.markup
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –∏ –µ–≥–æ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'event_mapping' not in context.user_data:
                context.user_data['event_mapping'] = {}
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
            keyboard = []
            for event in events:
                event_name = event['event_name']
                event_id = event['event_id']
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                context.user_data['event_mapping'][event_name] = event_id
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ show_matches_for_event
                context.user_data['event_type'] = event_type
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
                keyboard.append([KeyboardButton(event_name)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥")])
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            event_type_str = "–ø—Ä–æ—à–µ–¥—à–∏—Ö" if event_type == MENU_COMPLETED_MATCHES else "–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö"
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {event_type_str} –º–∞—Ç—á–µ–π:",
                reply_markup=markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.",
                reply_markup=self.markup
            )
    
    async def show_matches_for_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ç—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            event_id (int): ID —Å–æ–±—ã—Ç–∏—è
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (–ø—Ä–æ—à–µ–¥—à–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)
        event_type = context.user_data.get('event_type', MENU_COMPLETED_MATCHES)
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
            if event_type == MENU_COMPLETED_MATCHES:
                # –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('SELECT event_name FROM match_details WHERE event_id = ? LIMIT 1', (event_id,))
                event_result = cursor.fetchone()
                
                if not event_result:
                    await update.message.reply_text(
                        "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        reply_markup=self.markup
                    )
                    conn.close()
                    return
                
                event_name = event_result['event_name']
                
                # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —Å–æ–±—ã—Ç–∏—è
                cursor.execute('''
                    SELECT 
                        match_id, datetime, 
                        team1_id, team1_name, team1_score, 
                        team2_id, team2_name, team2_score
                    FROM match_details
                    WHERE event_id = ?
                    AND status = 'completed'
                    ORDER BY datetime
                ''', (event_id,))
                
                matches = cursor.fetchall()
                conn.close()
                
                if not matches:
                    await update.message.reply_text(
                        f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö —Å–æ–±—ã—Ç–∏—è {event_name}.",
                        reply_markup=self.markup
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                events = {
                    event_id: {
                        'name': event_name,
                        'matches': [dict(match) for match in matches]
                    }
                }
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è {event_name}</b>\n\n"
                message += self.format_matches_message(events)
            else:
                # –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('SELECT event_name FROM match_upcoming WHERE event_id = ? LIMIT 1', (event_id,))
                event_result = cursor.fetchone()
                
                if not event_result:
                    await update.message.reply_text(
                        "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        reply_markup=self.markup
                    )
                    conn.close()
                    return
                
                event_name = event_result['event_name']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ —Å–æ–±—ã—Ç–∏—è
                logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
                
                cursor.execute('''
                    SELECT 
                        match_id, datetime, 
                        team1_id, team1_name, team1_rank,
                        team2_id, team2_name, team2_rank
                    FROM match_upcoming
                    WHERE event_id = ?
                    AND status = 'upcoming'
                    ORDER BY datetime
                ''', (event_id,))
                
                matches = cursor.fetchall()
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è ID {event_id}")
                
                conn.close()
                
                if not matches:
                    await update.message.reply_text(
                        f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö —Å–æ–±—ã—Ç–∏—è {event_name}.",
                        reply_markup=self.markup
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                events = {
                    event_id: {
                        'name': event_name,
                        'matches': [dict(match) for match in matches]
                    }
                }
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ —Å–æ–±—ã—Ç–∏—è {event_name}</b>\n\n"
                message += self.format_upcoming_matches_message(events)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è {event_id}: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö.",
                reply_markup=self.markup
            )
    
    async def show_match_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, match_id):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            match_id (int): ID –º–∞—Ç—á–∞
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ ID {match_id}")
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
            cursor.execute('''
                SELECT 
                    m.match_id, m.datetime, 
                    m.team1_id, m.team1_name, m.team1_score, m.team1_rank,
                    m.team2_id, m.team2_name, m.team2_score, m.team2_rank,
                    m.event_id, m.event_name, 'completed' as match_type
                FROM match_details m
                WHERE m.match_id = ?
            ''', (match_id,))
            
            match = cursor.fetchone()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
            if not match:
                cursor.execute('''
                    SELECT 
                        m.match_id, m.datetime, 
                        m.team1_id, m.team1_name, 0 as team1_score, m.team1_rank,
                        m.team2_id, m.team2_name, 0 as team2_score, m.team2_rank,
                        m.event_id, m.event_name, 'upcoming' as match_type
                    FROM match_upcoming m
                    WHERE m.match_id = ?
                ''', (match_id,))
                
                match = cursor.fetchone()
            
            if not match:
                await update.message.reply_text(
                    f"–ú–∞—Ç—á —Å ID {match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=self.markup
                )
                conn.close()
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—à–µ–¥—à–∏–π –º–∞—Ç—á
            player_stats = []
            match_type = match['match_type']
            
            if match_type == 'completed':
                # –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
                cursor.execute('''
                    SELECT 
                        p.nickname, p.team_id, p.kills, p.deaths, 
                        p.kd_ratio, p.adr, p.kast, p.rating
                    FROM player_stats p
                    WHERE p.match_id = ?
                    ORDER BY p.team_id, p.rating DESC
                ''', (match_id,))
                
                player_stats = cursor.fetchall()
            elif match_type == 'upcoming':
                # –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
                cursor.execute('''
                    SELECT 
                        p.player_nickname as nickname, p.team_id
                    FROM match_upcoming_players p
                    WHERE p.match_id = ?
                    ORDER BY p.team_id
                ''', (match_id,))
                
                player_stats = cursor.fetchall()
            
            conn.close()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            match_time = datetime.fromtimestamp(match['datetime']).strftime('%d.%m.%Y %H:%M')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team1_name = match['team1_name']
            team2_name = match['team2_name']
            
            message = f"<b>‚è∞ {match_time}</b>\n"
            message += f"<b>üèÜ {match['event_name']}</b>\n\n"
            
            if match_type == 'completed':
                team1_score = match['team1_score']
                team2_score = match['team2_score']
                
                # –í—ã–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if team1_score > team2_score:
                    team1_name = f"üèÜ <b>{team1_name}</b>"
                elif team2_score > team1_score:
                    team2_name = f"<b>{team2_name}</b> üèÜ"
                    
                message += f"{team1_name} {team1_score} : {team2_score} {team2_name}\n\n"
            else:  # upcoming
                message += f"<b>{team1_name} vs {team2_name}</b>\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–æ–º–∞–Ω–¥
            if match['team1_rank'] or match['team2_rank']:
                team1_rank = f"#{match['team1_rank']}" if match['team1_rank'] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                team2_rank = f"#{match['team2_rank']}" if match['team2_rank'] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                message += f"–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥:\n{team1_rank} - {match['team1_name']}\n{team2_rank} - {match['team2_name']}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º head-to-head —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if match_type == 'upcoming' and hasattr(match, 'head_to_head_team1_wins') and hasattr(match, 'head_to_head_team2_wins'):
                if match['head_to_head_team1_wins'] is not None and match['head_to_head_team2_wins'] is not None:
                    message += f"<b>–ò—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á:</b>\n"
                    message += f"{match['team1_name']}: {match['head_to_head_team1_wins']} –ø–æ–±–µ–¥\n"
                    message += f"{match['team2_name']}: {match['head_to_head_team2_wins']} –ø–æ–±–µ–¥\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            team1_players = [p for p in player_stats if p['team_id'] == match['team1_id']]
            team2_players = [p for p in player_stats if p['team_id'] == match['team2_id']]
            
            if match_type == 'completed' and (team1_players or team2_players):
                message += "<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
                
                if team1_players:
                    message += f"<b>{match['team1_name']}:</b>\n"
                    message += "<pre>\n"
                    message += "–ò–≥—Ä–æ–∫        K-D   K/D  ADR KAST Rating\n"
                    message += "----------------------------------------\n"
                    
                    for player in team1_players:
                        nick = player['nickname']
                        if len(nick) > 12:
                            nick = nick[:9] + "..."
                            
                        kd = f"{player['kills'] or 0}-{player['deaths'] or 0}"
                        kd_ratio = f"{player['kd_ratio']:.2f}" if player['kd_ratio'] else "0.00"
                        adr = f"{player['adr']:.1f}" if player['adr'] else "0.0"
                        kast = f"{player['kast']*100:.0f}%" if player['kast'] else "0%"
                        rating = f"{player['rating']:.2f}" if player['rating'] else "0.00"
                        
                        message += f"{nick.ljust(12)} {kd.ljust(5)} {kd_ratio.ljust(4)} {adr.ljust(3)} {kast.ljust(4)} {rating}\n"
                    
                    message += "</pre>\n\n"
                
                if team2_players:
                    message += f"<b>{match['team2_name']}:</b>\n"
                    message += "<pre>\n"
                    message += "–ò–≥—Ä–æ–∫        K-D   K/D  ADR KAST Rating\n"
                    message += "----------------------------------------\n"
                    
                    for player in team2_players:
                        nick = player['nickname']
                        if len(nick) > 12:
                            nick = nick[:9] + "..."
                            
                        kd = f"{player['kills'] or 0}-{player['deaths'] or 0}"
                        kd_ratio = f"{player['kd_ratio']:.2f}" if player['kd_ratio'] else "0.00"
                        adr = f"{player['adr']:.1f}" if player['adr'] else "0.0"
                        kast = f"{player['kast']*100:.0f}%" if player['kast'] else "0%"
                        rating = f"{player['rating']:.2f}" if player['rating'] else "0.00"
                        
                        message += f"{nick.ljust(12)} {kd.ljust(5)} {kd_ratio.ljust(4)} {adr.ljust(3)} {kast.ljust(4)} {rating}\n"
                    
                    message += "</pre>\n"
            elif match_type == 'upcoming' and (team1_players or team2_players):
                message += "<b>üë• –û–∂–∏–¥–∞–µ–º—ã–µ —Å–æ—Å—Ç–∞–≤—ã:</b>\n\n"
                
                if team1_players:
                    message += f"<b>{match['team1_name']}:</b>\n"
                    for player in team1_players:
                        message += f"‚Ä¢ {player['nickname']}\n"
                    message += "\n"
                
                if team2_players:
                    message += f"<b>{match['team2_name']}:</b>\n"
                    for player in team2_players:
                        message += f"‚Ä¢ {player['nickname']}\n"
            else:
                message += "<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞.</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ {match_id}: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ.",
                reply_markup=self.markup
            )
    
    async def show_last_day_matches_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –º–∞—Ç—á–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞
        """
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        today = datetime.now()
        yesterday = today - timedelta(days=1)
        start_timestamp = datetime(yesterday.year, yesterday.month, yesterday.day, 0, 0, 0).timestamp()
        end_timestamp = datetime(yesterday.year, yesterday.month, yesterday.day, 23, 59, 59).timestamp()
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            cursor.execute('''
                SELECT 
                    match_id, datetime, 
                    team1_id, team1_name, team1_score, 
                    team2_id, team2_name, team2_score,
                    event_name
                FROM match_details
                WHERE datetime BETWEEN ? AND ?
                AND status = 'completed'
                ORDER BY datetime DESC
            ''', (start_timestamp, end_timestamp))
            
            matches = cursor.fetchall()
            conn.close()
            
            if not matches:
                await update.message.reply_text(
                    f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –∑–∞ {yesterday.strftime('%d.%m.%Y')}.",
                    reply_markup=self.markup
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
            keyboard = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞ –∏ –µ–≥–æ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'match_mapping' not in context.user_data:
                context.user_data['match_mapping'] = {}
            
            for match in matches:
                team1_name = match['team1_name'].split()[0]
                team2_name = match['team2_name'].split()[0]
                team1_score = match['team1_score']
                team2_score = match['team2_score']
                match_id = match['match_id']
                event_name = match['event_name']
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                match_text = f"{team1_name} {team1_score}:{team2_score} {team2_name}"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                context.user_data['match_mapping'][match_text] = match_id
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                keyboard.append([KeyboardButton(match_text)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥")])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                f"–ú–∞—Ç—á–∏ –∑–∞ {yesterday.strftime('%d.%m.%Y')}. –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π.",
                reply_markup=self.markup
            )
    
    async def find_matches_by_team(self, update: Update, context: ContextTypes.DEFAULT_TYPE, team_name):
        """
        –ü–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            team_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã: {team_name}")
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
            cursor.execute('''
                SELECT 
                    match_id, datetime, 
                    team1_id, team1_name, team1_score, 
                    team2_id, team2_name, team2_score,
                    event_name, status, 'completed' as match_type
                FROM match_details
                WHERE (LOWER(team1_name) = LOWER(?) OR LOWER(team2_name) = LOWER(?))
                AND status = 'completed'
                ORDER BY datetime DESC
                LIMIT 10
            ''', (team_name, team_name))
            
            completed_matches = cursor.fetchall()
            
            # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
            cursor.execute('''
                SELECT 
                    match_id, datetime, 
                    team1_id, team1_name, 0 as team1_score, 
                    team2_id, team2_name, 0 as team2_score,
                    event_name, 'upcoming' as status, 'upcoming' as match_type
                FROM match_upcoming
                WHERE (LOWER(team1_name) = LOWER(?) OR LOWER(team2_name) = LOWER(?))
                AND status = 'upcoming'
                ORDER BY datetime ASC
                LIMIT 10
            ''', (team_name, team_name))
            
            upcoming_matches = cursor.fetchall()
            conn.close()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ, –ø–æ—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–∏–µ
            all_matches = list(upcoming_matches) + list(completed_matches)
            
            if not all_matches:
                await update.message.reply_text(
                    f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{team_name}'.",
                    reply_markup=self.markup
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
            keyboard = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞ –∏ –µ–≥–æ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'match_mapping' not in context.user_data:
                context.user_data['match_mapping'] = {}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Å –¥–∞—Ç–∞–º–∏
            matches_list = f"<b>–ú–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã '{team_name}':</b>\n\n"
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
            if upcoming_matches:
                matches_list += "<b>üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏:</b>\n"
                for i, match in enumerate(upcoming_matches, 1):
                    team1_name = match['team1_name']
                    team2_name = match['team2_name']
                    match_id = match['match_id']
                    match_date = datetime.fromtimestamp(match['datetime']).strftime('%d.%m.%Y %H:%M')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                    matches_list += f"{i}. <b>{match_date}</b>: {team1_name} vs {team2_name}\n"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
                    match_text = f"{team1_name} vs {team2_name}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    context.user_data['match_mapping'][match_text] = match_id
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    keyboard.append([KeyboardButton(match_text)])
                
                matches_list += "\n"
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏
            if completed_matches:
                matches_list += "<b>üìä –ü—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏:</b>\n"
                for i, match in enumerate(completed_matches, 1):
                    team1_name = match['team1_name']
                    team2_name = match['team2_name']
                    team1_score = match['team1_score']
                    team2_score = match['team2_score']
                    match_id = match['match_id']
                    match_date = datetime.fromtimestamp(match['datetime']).strftime('%d.%m.%Y')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                    matches_list += f"{i}. <b>{match_date}</b>: {team1_name} {team1_score}:{team2_score} {team2_name}\n"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
                    match_text = f"{team1_name} {team1_score}:{team2_score} {team2_name}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    context.user_data['match_mapping'][match_text] = match_id
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    keyboard.append([KeyboardButton(match_text)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥")])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
            await update.message.reply_text(
                matches_list,
                parse_mode="HTML"
            )
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=self.markup
            )
    
    def get_upcoming_matches_by_date(self, date_start, date_end):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            date_start (int): –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            date_end (int): –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        """
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
            cursor = conn.cursor()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç {date_start} –¥–æ {date_end}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            cursor.execute('''
                SELECT 
                    m.match_id, m.datetime, 
                    m.team1_id, m.team1_name, m.team1_rank,
                    m.team2_id, m.team2_name, m.team2_rank,
                    m.event_id, m.event_name
                FROM match_upcoming m
                WHERE m.datetime BETWEEN ? AND ?
                AND m.status = 'upcoming'
                ORDER BY m.event_id, m.datetime
            ''', (date_start, date_end))
            
            matches = cursor.fetchall()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –≤ –ë–î")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
            events = {}
            for match in matches:
                event_id = match['event_id']
                event_name = match['event_name']
                
                if event_id not in events:
                    events[event_id] = {
                        'name': event_name,
                        'matches': []
                    }
                
                events[event_id]['matches'].append({
                    'match_id': match['match_id'],
                    'datetime': match['datetime'],
                    'team1_id': match['team1_id'],
                    'team1_name': match['team1_name'],
                    'team1_rank': match['team1_rank'],
                    'team2_id': match['team2_id'],
                    'team2_name': match['team2_name'],
                    'team2_rank': match['team2_rank']
                })
            
            conn.close()
            return events
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π: {str(e)}")
            return {}
    
    def format_upcoming_matches_message(self, events):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –º–∞—Ç—á–∞–º–∏
        
        Args:
            events (dict): –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –º–∞—Ç—á–∞–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not events:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        
        message = ""
        
        for event_id, event_data in events.items():
            event_name = event_data['name'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            matches = event_data['matches']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            message += f"üèÜ <b>{event_name}</b>\n\n"
            
            for match in matches:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
                team1_name = match['team1_name']
                team2_name = match['team2_name']
                match_id = match['match_id']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                match_datetime = datetime.fromtimestamp(match['datetime'])
                match_date = match_datetime.strftime('%d.%m')
                match_time = match_datetime.strftime('%H:%M')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–∞—Ç—á–µ–º
                message += f"‚Ä¢ <b>{match_date} {match_time}</b> <code>{team1_name}</code> vs <code>{team2_name}</code>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            message += "\n"
        
        return message
    
    async def show_upcoming_matches_for_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE, days=0):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            days (int): –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (0 - —Å–µ–≥–æ–¥–Ω—è, 1 - –∑–∞–≤—Ç—Ä–∞, –∏ —Ç.–¥.)
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        
        today = datetime.now()
        current_timestamp = today.timestamp()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
        if days == 0:  # –°–µ–≥–æ–¥–Ω—è - –±–µ—Ä–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            start_timestamp = current_timestamp
            end_date = datetime(today.year, today.month, today.day, 23, 59, 59)
            end_timestamp = end_date.timestamp()
            period_text = "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({start_timestamp} - {end_timestamp})")
        elif days == 1:  # –ó–∞–≤—Ç—Ä–∞
            tomorrow = today + timedelta(days=1)
            start_date = datetime(tomorrow.year, tomorrow.month, tomorrow.day, 0, 0, 0)
            end_date = datetime(tomorrow.year, tomorrow.month, tomorrow.day, 23, 59, 59)
            start_timestamp = start_date.timestamp()
            end_timestamp = end_date.timestamp()
            period_text = f"–Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({start_date.strftime('%d.%m.%Y')})"
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({start_timestamp} - {end_timestamp})")
        else:  # –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
            start_date = datetime(today.year, today.month, today.day, 0, 0, 0)
            end_date = start_date + timedelta(days=days)
            start_timestamp = current_timestamp  # –° —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            end_timestamp = end_date.timestamp()
            period_text = f"–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ {days} –¥–Ω–µ–π"
            logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ {days} –¥–Ω–µ–π ({start_timestamp} - {end_timestamp})")
            
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        events = self.get_upcoming_matches_by_date(start_timestamp, end_timestamp)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        match_count = sum(len(event_data['matches']) for event_data in events.values()) if events else 0
        logger.info(f"{user_info} - –ù–∞–π–¥–µ–Ω–æ {match_count} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ {period_text}</b>\n\n"
        message += self.format_upcoming_matches_message(events)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
    
    async def send_upcoming_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        await self.show_upcoming_matches_for_period(update, context, 0)
    
    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
        """
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help))
        application.add_handler(CommandHandler("yesterday", self.send_yesterday_stats))
        application.add_handler(CommandHandler("today", self.send_today_stats))
        application.add_handler(CommandHandler("upcoming", self.send_upcoming_matches))
        application.add_handler(CommandHandler("subscribe", self.subscribe))
        application.add_handler(CommandHandler("unsubscribe", self.unsubscribe))
        application.add_handler(CommandHandler("menu", self.show_menu))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(stop_signals=None)

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    bot = HLTVStatsBot(TOKEN, DB_PATH, SUBSCRIBERS_DB_PATH)
    bot.run()

if __name__ == "__main__":
    main() 