#!/usr/bin/env python
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)
"""

import os
import logging
import sqlite3
from datetime import datetime, timedelta, timezone
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import sys
import tempfile
import traceback

from src.bots.config import load_config
from src.scripts.live_matches_parser import handle_new_subscription

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config('user')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
TOKEN = config['token']
DB_PATH = config['hltv_db_path']

# –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
MENU_UPCOMING_MATCHES = "–ë—É–¥—É—â–∏–µ –º–∞—Ç—á–∏"
MENU_COMPLETED_MATCHES = "–ü—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏"
MENU_LIVE_MATCHES = "Live –º–∞—Ç—á–∏"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
MOSCOW_TIMEZONE = timezone(timedelta(hours=3))

class HLTVStatsBot:
    """
    –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ HLTV
    """
    
    def __init__(self, token, db_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω –¥–ª—è Telegram API
            db_path (str): –ü—É—Ç—å –∫ –ë–î —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π HLTV
        """
        self.token = token
        self.db_path = db_path
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞
        self.logger = logging.getLogger(__name__)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É –ª–æ–≥–≥–µ—Ä–∞
        if not self.logger.handlers:
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setLevel(logging.INFO)
            formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
            console_handler.setFormatter(formatter)
            self.logger.addHandler(console_handler)
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ HLTV")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
        self.menu_keyboard = [
            [KeyboardButton(MENU_COMPLETED_MATCHES)],
            [KeyboardButton(MENU_UPCOMING_MATCHES)],
            [KeyboardButton(MENU_LIVE_MATCHES)]
        ]
        self.markup = ReplyKeyboardMarkup(self.menu_keyboard, resize_keyboard=True)
        
    def _get_safe_user_info(self, user):
        """
        –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è,
        –∏–∑–±–µ–≥–∞—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π Unicode
        
        Args:
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram
            
        Returns:
            str: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        """
        try:
            first_name = user.first_name if user.first_name else ""
            last_name = user.last_name if user.last_name else ""
            username = user.username if user.username else "no_username"
            
            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –∏—Ö –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–ª–∏ —É–¥–∞–ª—è–µ–º –∏—Ö
            first_name = ''.join(c if ord(c) < 128 else '_' for c in first_name)
            last_name = ''.join(c if ord(c) < 128 else '_' for c in last_name)
            
            return f"User: {first_name} {last_name} (@{username}) [ID: {user.id}]"
        except:
            # –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return f"User ID: {user.id}"
    
    async def error(self, update, context):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        """
        self.logger.error(f"–û—à–∏–±–∫–∞: {context.error} –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {update}")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start")
        
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV.\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            f"/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
            f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis'), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /help")
        
        message = (
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:\n\n"
            "/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            "/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis')."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        """
        message_text = update.message.text
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π
        context.user_data['last_button'] = message_text
        
        # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ live-–º–∞—Ç—á
        if message_text.startswith("/subscribe_live "):
            try:
                match_id = int(message_text.split(" ")[1])
                handle_new_subscription(match_id, user.id)
                await update.message.reply_text(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ live-–º–∞—Ç—á {match_id}")
            except Exception as e:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ live-–º–∞—Ç—á.")
            return
        # –û—Ç–ø–∏—Å–∫–∞ –æ—Ç live-–º–∞—Ç—á–∞
        if message_text.startswith("/unsubscribe_live "):
            try:
                match_id = int(message_text.split(" ")[1])
                from src.scripts.live_matches_parser import load_json, save_json, SUBS_JSON
                subs = load_json(SUBS_JSON, default={})
                match_id_str = str(match_id)
                if match_id_str in subs and user.id in subs[match_id_str]:
                    subs[match_id_str].remove(user.id)
                    if not subs[match_id_str]:
                        subs.pop(match_id_str)
                    save_json(SUBS_JSON, subs)
                    await update.message.reply_text(f"–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç live-–º–∞—Ç—á–∞ {match_id}")
                else:
                    await update.message.reply_text("–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ç—á.")
            except Exception as e:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç live-–º–∞—Ç—á–∞.")
            return
        
        if message_text == MENU_COMPLETED_MATCHES:
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π")
            context.user_data['showing_menu'] = MENU_COMPLETED_MATCHES
            await self.show_completed_matches(update, context)
        elif message_text == MENU_UPCOMING_MATCHES:
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –±—É–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π")
            context.user_data['showing_menu'] = MENU_UPCOMING_MATCHES
            await self.show_upcoming_matches(update, context)
        elif message_text == MENU_LIVE_MATCHES:
            await self.show_live_matches(update, context)
        elif message_text == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.send_today_stats(update, context)
        elif message_text == "–ó–∞ –≤—á–µ—Ä–∞":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞")
            await self.show_matches_for_period(update, context, 1)
        elif message_text == "–ó–∞ 3 –¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ 3 –¥–Ω—è")
            await self.show_matches_for_period(update, context, 3)
        elif message_text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 0)
        elif message_text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            await self.show_upcoming_matches_for_period(update, context, 1)
        elif message_text == "–ù–∞ 3 –¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ 3 –¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 3)
        elif message_text == "–ü–æ —Å–æ–±—ã—Ç–∏—é":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
            await self.show_events_list(update, context)
        elif message_text == "–ù–∞–∑–∞–¥":
            self.logger.info(f"{user_info} - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_menu(update, context)
        elif 'match_mapping' in context.user_data and message_text in context.user_data['match_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            match_id = context.user_data['match_mapping'][message_text]
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ ID {match_id}")
            await self.show_match_details(update, context, match_id)
        elif 'event_mapping' in context.user_data and message_text in context.user_data['event_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            event_id = context.user_data['event_mapping'][message_text]
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
            await self.show_matches_for_event(update, context, event_id)
        elif "(" in message_text and ")" in message_text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å ID –≤ —Å–∫–æ–±–∫–∞—Ö (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Ç—á–∞ –∏–∑ —Å–∫–æ–±–æ–∫
                match_id_text = message_text.split("(")[-1].split(")")[0].strip()
                match_id = int(''.join(filter(str.isdigit, match_id_text)))
                await self.show_match_details(update, context, match_id)
            except (ValueError, IndexError):
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞.",
                    reply_markup=self.markup
                )
        else:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            await self.find_matches_by_team(update, context, message_text)
    
    async def show_completed_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
        """
        keyboard = [
            [KeyboardButton("–ó–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("–ó–∞ –≤—á–µ—Ä–∞")],
            [KeyboardButton("–ó–∞ 3 –¥–Ω—è")],
            [KeyboardButton("–ü–æ —Å–æ–±—ã—Ç–∏—é")],
            [KeyboardButton("–ù–∞–∑–∞–¥")]
        ]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π:",
            reply_markup=markup
        )
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä Natus Vincere, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–¥—É—â–∏–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã."
        )
    
    async def show_upcoming_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
        """
        keyboard = [
            [KeyboardButton("–ù–∞ —Å–µ–≥–æ–¥–Ω—è")],
            [KeyboardButton("–ù–∞ –∑–∞–≤—Ç—Ä–∞")],
            [KeyboardButton("–ù–∞ 3 –¥–Ω—è")],
            [KeyboardButton("–ü–æ —Å–æ–±—ã—Ç–∏—é")],
            [KeyboardButton("–ù–∞–∑–∞–¥")]
        ]
        markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π:",
            reply_markup=markup
        )
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä Natus Vincere, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–¥—É—â–∏–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã."
        )
    
    async def send_yesterday_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≤—á–µ—Ä–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        await self.show_matches_for_period(update, context, 1)
    
    async def send_today_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        today = datetime.now(MOSCOW_TIMEZONE)
        start_of_today = datetime(today.year, today.month, today.day, 0, 0, 0, tzinfo=MOSCOW_TIMEZONE).timestamp()
        end_of_today = datetime(today.year, today.month, today.day, 23, 59, 59, tzinfo=MOSCOW_TIMEZONE).timestamp()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        events = self.get_matches_by_date(start_of_today, end_of_today)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∑–∞ {today.strftime('%d.%m.%Y')}</b>\n\n"
        message += self.format_matches_message(events)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        match_count = sum(len(event_data['matches']) for event_data in events.values()) if events else 0
        self.logger.info(f"{user_info} - –ù–∞–π–¥–µ–Ω–æ {match_count} –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä Natus Vincere, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–¥—É—â–∏–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã."
        )
    
    async def show_matches_for_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE, days=1):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            days (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å)
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        
        today = datetime.now(MOSCOW_TIMEZONE)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
        end_date = datetime(today.year, today.month, today.day, 0, 0, 0, tzinfo=MOSCOW_TIMEZONE) - timedelta(days=1)
        end_timestamp = end_date.timestamp() + 86399  # –ö–æ–Ω–µ—Ü –¥–Ω—è (23:59:59)
        start_date = end_date - timedelta(days=days-1)
        start_timestamp = start_date.timestamp()
        
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        events = self.get_matches_by_date(start_timestamp, end_timestamp)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        match_count = sum(len(event_data['matches']) for event_data in events.values()) if events else 0
        self.logger.info(f"{user_info} - –ù–∞–π–¥–µ–Ω–æ {match_count} –º–∞—Ç—á–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        
        if days == 1:
            period_text = f"–∑–∞ {end_date.strftime('%d.%m.%Y')}"
        else:
            period_text = f"–∑–∞ –ø–µ—Ä–∏–æ–¥ —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π {period_text}</b>\n\n"
        message += self.format_matches_message(events)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä Natus Vincere, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–¥—É—â–∏–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã."
        )
    
    async def show_events_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏–π –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è (–ø—Ä–æ—à–µ–¥—à–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)
        if 'showing_menu' not in context.user_data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∞–∂–∞—Ç—ã–º –∫–Ω–æ–ø–∫–∞–º –º–µ–Ω—é
            if context.user_data.get('last_button') in ["–ù–∞ —Å–µ–≥–æ–¥–Ω—è", "–ù–∞ –∑–∞–≤—Ç—Ä–∞", "–ù–∞ 3 –¥–Ω—è", MENU_UPCOMING_MATCHES]:
                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –º–∞—Ç—á–∞–º–∏
                context.user_data['showing_menu'] = MENU_UPCOMING_MATCHES
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
                context.user_data['showing_menu'] = MENU_COMPLETED_MATCHES
        
        event_type = context.user_data['showing_menu']
        
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ç–∏–ø–∞ {event_type}")
        
        today = datetime.now(MOSCOW_TIMEZONE)
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            if event_type == MENU_COMPLETED_MATCHES:
                # –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π - —Å–º–æ—Ç—Ä–∏–º –Ω–∞–∑–∞–¥ –Ω–∞ 7 –¥–Ω–µ–π
                start_date = today - timedelta(days=7)
                start_timestamp = start_date.timestamp()
                end_timestamp = today.timestamp()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('''
                    SELECT DISTINCT event_id, event_name 
                    FROM result_match
                    WHERE datetime BETWEEN ? AND ?
                    AND event_id IS NOT NULL
                    AND event_name IS NOT NULL
                    ORDER BY event_name
                ''', (start_timestamp, end_timestamp))
            else:  # MENU_UPCOMING_MATCHES
                # –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π - —Å–º–æ—Ç—Ä–∏–º –≤–ø–µ—Ä–µ–¥ –Ω–∞ 14 –¥–Ω–µ–π
                start_timestamp = today.timestamp()
                end_date = today + timedelta(days=14)
                end_timestamp = end_date.timestamp()
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('''
                    SELECT DISTINCT event_id, event_name 
                    FROM upcoming_match
                    WHERE datetime BETWEEN ? AND ?
                    AND event_id IS NOT NULL
                    AND event_name IS NOT NULL
                    ORDER BY event_name
                ''', (start_timestamp, end_timestamp))
            
            events = cursor.fetchall()
            conn.close()
            
            if not events:
                period_str = "–∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é" if event_type == MENU_COMPLETED_MATCHES else "–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π"
                await update.message.reply_text(
                    f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏—è—Ö {period_str}.",
                    reply_markup=self.markup
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –∏ –µ–≥–æ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'event_mapping' not in context.user_data:
                context.user_data['event_mapping'] = {}
                
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–±—ã—Ç–∏–π
            keyboard = []
            for event in events:
                event_name = event['event_name']
                event_id = event['event_id']
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                context.user_data['event_mapping'][event_name] = event_id
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è
                keyboard.append([KeyboardButton(event_name)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥")])
            markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            event_type_str = "–ø—Ä–æ—à–µ–¥—à–∏—Ö" if event_type == MENU_COMPLETED_MATCHES else "–ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö"
            await update.message.reply_text(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ {event_type_str} –º–∞—Ç—á–µ–π:",
                reply_markup=markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.",
                reply_markup=self.markup
            )
    
    async def show_matches_for_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE, event_id):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–∞—Ç—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            event_id (int): ID —Å–æ–±—ã—Ç–∏—è
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è (–ø—Ä–æ—à–µ–¥—à–∏–µ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ)
        event_type = context.user_data.get('showing_menu', MENU_COMPLETED_MATCHES)
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–±—ã—Ç–∏–µ
            if event_type == MENU_COMPLETED_MATCHES:
                # –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('SELECT event_name FROM result_match WHERE event_id = ? LIMIT 1', (event_id,))
                event_result = cursor.fetchone()
                
                if not event_result:
                    await update.message.reply_text(
                        "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        reply_markup=self.markup
                    )
                    conn.close()
                    return
                
                event_name = event_result['event_name']
                
                # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ —Å–æ–±—ã—Ç–∏—è
                cursor.execute('''
                    SELECT 
                        match_id, datetime, 
                        team1_id, team1_name, team1_score, 
                        team2_id, team2_name, team2_score
                    FROM result_match
                    WHERE event_id = ?
                    ORDER BY datetime
                ''', (event_id,))
                
                matches = cursor.fetchall()
                conn.close()
                
                if not matches:
                    await update.message.reply_text(
                        f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö —Å–æ–±—ã—Ç–∏—è {event_name}.",
                        reply_markup=self.markup
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                events = {
                    event_id: {
                        'name': event_name,
                        'matches': [dict(match) for match in matches]
                    }
                }
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è {event_name}</b>\n\n"
                message += self.format_matches_message(events)
            else:  # MENU_UPCOMING_MATCHES
                # –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
                cursor.execute('SELECT event_name FROM upcoming_match WHERE event_id = ? LIMIT 1', (event_id,))
                event_result = cursor.fetchone()
                
                if not event_result:
                    await update.message.reply_text(
                        "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                        reply_markup=self.markup
                    )
                    conn.close()
                    return
                
                event_name = event_result['event_name']
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ —Å–æ–±—ã—Ç–∏—è
                self.logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
                
                cursor.execute('''
                    SELECT 
                        match_id, datetime, 
                        team1_id, team1_name, team1_rank,
                        team2_id, team2_name, team2_rank
                    FROM upcoming_match
                    WHERE event_id = ?
                    ORDER BY datetime
                ''', (event_id,))
                
                matches = cursor.fetchall()
                
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è ID {event_id}")
                
                conn.close()
                
                if not matches:
                    await update.message.reply_text(
                        f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö —Å–æ–±—ã—Ç–∏—è {event_name}.",
                        reply_markup=self.markup
                    )
                    return
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                events = {
                    event_id: {
                        'name': event_name,
                        'matches': [dict(match) for match in matches]
                    }
                }
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = f"üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ —Å–æ–±—ã—Ç–∏—è {event_name}</b>\n\n"
                message += self.format_upcoming_matches_message(events)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∏–º–∞—Ö –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
            ics_button_markup = None
            ics_file_path = None
            if event_type == 'upcoming':
                try:
                    conn2 = sqlite3.connect(self.db_path)
                    conn2.row_factory = sqlite3.Row
                    cursor2 = conn2.cursor()
                    cursor2.execute('''
                        SELECT name, lang, url FROM upcoming_match_streamers WHERE match_id = ?
                    ''', (event_id,))
                    streams = cursor2.fetchall()
                    conn2.close()
                    if streams:
                        message += '\n<b>–ì–¥–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:</b>\n'
                        for s in streams:
                            lang = f" ({s['lang']})" if s['lang'] else ''
                            message += f"‚Ä¢ <a href=\"{s['url']}\">{s['name']}{lang}</a>\n"
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ {event_id}: {str(e)}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=ics_button_markup if ics_button_markup else self.markup)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è {event_id}: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö.",
                reply_markup=self.markup
            )
    
    async def show_match_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, match_id):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            match_id (int): ID –º–∞—Ç—á–∞
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ ID {match_id}")
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
            cursor.execute('''
                SELECT 
                    m.match_id, m.datetime, 
                    m.team1_id, m.team1_name, m.team1_score, m.team1_rank,
                    m.team2_id, m.team2_name, m.team2_score, m.team2_rank,
                    m.event_id, m.event_name, m.demo_id, 'completed' as match_type
                FROM result_match m
                WHERE m.match_id = ?
            ''', (match_id,))
            
            match = cursor.fetchone()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
            if not match:
                cursor.execute('''
                    SELECT 
                        m.match_id, m.datetime, 
                        m.team1_id, m.team1_name, 0 as team1_score, m.team1_rank,
                        m.team2_id, m.team2_name, 0 as team2_score, m.team2_rank,
                        m.event_id, m.event_name, NULL as demo_id, 'upcoming' as match_type
                    FROM upcoming_match m
                    WHERE m.match_id = ?
                ''', (match_id,))
                
                match = cursor.fetchone()
            
            if not match:
                await update.message.reply_text(
                    f"–ú–∞—Ç—á —Å ID {match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=self.markup
                )
                conn.close()
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—à–µ–¥—à–∏–π –º–∞—Ç—á
            player_stats = []
            match_type = match['match_type']
            
            if match_type == 'completed':
                # –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
                cursor.execute('''
                    SELECT 
                        p.nickname, p.team_id, p.kills, p.deaths, 
                        p.kd_ratio, p.adr, p.kast, p.rating
                    FROM player_stats p
                    WHERE p.match_id = ?
                    ORDER BY p.team_id, p.rating DESC
                ''', (match_id,))
                
                player_stats = cursor.fetchall()
            elif match_type == 'upcoming':
                # –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
                cursor.execute('''
                    SELECT 
                        p.player_nickname as nickname, p.team_id
                    FROM upcoming_match_players p
                    WHERE p.match_id = ?
                    ORDER BY p.team_id
                ''', (match_id,))
                
                player_stats = cursor.fetchall()
            
            conn.close()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            match_datetime = datetime.fromtimestamp(match['datetime'], tz=MOSCOW_TIMEZONE).strftime('%d.%m.%Y %H:%M')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team1_name = match['team1_name']
            team2_name = match['team2_name']
            
            message = f"<b>‚è∞ {match_datetime}</b>\n"
            message += f"<b>üèÜ {match['event_name']}</b>\n\n"
            
            if match_type == 'completed':
                team1_score = match['team1_score']
                team2_score = match['team2_score']
                
                # –í—ã–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if team1_score > team2_score:
                    team1_name = f"üèÜ <b>{team1_name}</b>"
                    team2_name = f"{team2_name}"
                elif team2_score > team1_score:
                    team1_name = f"{team1_name}"
                    team2_name = f"<b>{team2_name}</b>"
                    
                message += f"{team1_name} {team1_score} : {team2_score} {team2_name}\n\n"

                # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º ---
                try:
                    conn2 = sqlite3.connect(self.db_path)
                    conn2.row_factory = sqlite3.Row
                    cursor2 = conn2.cursor()
                    cursor2.execute('''
                        SELECT map_name, team1_rounds, team2_rounds, rounds
                        FROM result_match_maps
                        WHERE match_id = ?
                        ORDER BY id
                    ''', (match_id,))
                    maps = cursor2.fetchall()
                    conn2.close()
                    if maps:
                        message += '<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–∞–º:</b>\n'
                        for m in maps:
                            map_line = f"{m['map_name']}: {m['team1_rounds']}"
                            if m['rounds']:
                                map_line += f" {m['rounds']}"
                            map_line += f" {m['team2_rounds']}"
                            message += map_line + '\n'
                        message += '\n'
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –¥–ª—è –º–∞—Ç—á–∞ {match_id}: {str(e)}")
                # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---
            else:  # upcoming
                message += f"<b>{team1_name} vs {team2_name}</b>\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–æ–º–∞–Ω–¥
            if match['team1_rank'] or match['team2_rank']:
                team1_rank = f"#{match['team1_rank']}" if match['team1_rank'] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                team2_rank = f"#{match['team2_rank']}" if match['team2_rank'] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                message += f"–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥:\n{team1_rank} - {match['team1_name']}\n{team2_rank} - {match['team2_name']}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º head-to-head —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if match_type == 'upcoming' and hasattr(match, 'head_to_head_team1_wins') and hasattr(match, 'head_to_head_team2_wins'):
                if match['head_to_head_team1_wins'] is not None and match['head_to_head_team2_wins'] is not None:
                    message += f"<b>–ò—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á:</b>\n"
                    message += f"{match['team1_name']}: {match['head_to_head_team1_wins']} –ø–æ–±–µ–¥\n"
                    message += f"{match['team2_name']}: {match['head_to_head_team2_wins']} –ø–æ–±–µ–¥\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ–º–æ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            if match_type == 'completed' and match['demo_id']:
                demo_url = f"https://www.hltv.org/download/demo/{match['demo_id']}"
                message += f"<b>üì• <a href='{demo_url}'>–°–∫–∞—á–∞—Ç—å Demo –∏–≥—Ä—ã</a></b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            team1_players = [p for p in player_stats if p['team_id'] == match['team1_id']]
            team2_players = [p for p in player_stats if p['team_id'] == match['team2_id']]
            
            if match_type == 'completed' and (team1_players or team2_players):
                message += "<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
                
                if team1_players:
                    message += f"<b>{match['team1_name']}:</b>\n"
                    message += "<pre>\n"
                    message += "–ò–≥—Ä–æ–∫        K-D   K/D  ADR KAST Rating\n"
                    message += "----------------------------------------\n"
                    
                    for player in team1_players:
                        nick = player['nickname']
                        if len(nick) > 12:
                            nick = nick[:9] + "..."
                            
                        kd = f"{player['kills'] or 0}-{player['deaths'] or 0}"
                        kd_ratio = f"{player['kd_ratio']:.2f}" if player['kd_ratio'] else "0.00"
                        adr = f"{player['adr']:.1f}" if player['adr'] else "0.0"
                        kast = f"{player['kast']*100:.0f}%" if player['kast'] else "0%"
                        rating = f"{player['rating']:.2f}" if player['rating'] else "0.00"
                        
                        message += f"{nick.ljust(12)} {kd.ljust(5)} {kd_ratio.ljust(4)} {adr.ljust(3)} {kast.ljust(4)} {rating}\n"
                    
                    message += "</pre>\n\n"
                
                if team2_players:
                    message += f"<b>{match['team2_name']}:</b>\n"
                    message += "<pre>\n"
                    message += "–ò–≥—Ä–æ–∫        K-D   K/D  ADR KAST Rating\n"
                    message += "----------------------------------------\n"
                    
                    for player in team2_players:
                        nick = player['nickname']
                        if len(nick) > 12:
                            nick = nick[:9] + "..."
                            
                        kd = f"{player['kills'] or 0}-{player['deaths'] or 0}"
                        kd_ratio = f"{player['kd_ratio']:.2f}" if player['kd_ratio'] else "0.00"
                        adr = f"{player['adr']:.1f}" if player['adr'] else "0.0"
                        kast = f"{player['kast']*100:.0f}%" if player['kast'] else "0%"
                        rating = f"{player['rating']:.2f}" if player['rating'] else "0.00"
                        
                        message += f"{nick.ljust(12)} {kd.ljust(5)} {kd_ratio.ljust(4)} {adr.ljust(3)} {kast.ljust(4)} {rating}\n"
                    
                    message += "</pre>\n"
            elif match_type == 'upcoming' and (team1_players or team2_players):
                message += "<b>üë• –û–∂–∏–¥–∞–µ–º—ã–µ —Å–æ—Å—Ç–∞–≤—ã:</b>\n\n"
                
                if team1_players:
                    message += f"<b>{match['team1_name']}:</b>\n"
                    for player in team1_players:
                        message += f"‚Ä¢ {player['nickname']}\n"
                    message += "\n"
                
                if team2_players:
                    message += f"<b>{match['team2_name']}:</b>\n"
                    for player in team2_players:
                        message += f"‚Ä¢ {player['nickname']}\n"
            else:
                message += "<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞.</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ {match_id}: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ.",
                reply_markup=self.markup
            )
    
    async def find_matches_by_team(self, update: Update, context: ContextTypes.DEFAULT_TYPE, team_name):
        """
        –ü–æ–∏—Å–∫ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            team_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã: {team_name}")
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
            cursor.execute('''
                SELECT 
                    match_id, datetime, 
                    team1_id, team1_name, team1_score, 
                    team2_id, team2_name, team2_score,
                    event_name, 'completed' as match_type
                FROM result_match
                WHERE (LOWER(team1_name) = LOWER(?) OR LOWER(team2_name) = LOWER(?))
                ORDER BY datetime DESC
                LIMIT 10
            ''', (team_name, team_name))
            
            completed_matches = cursor.fetchall()
            
            # –ü–æ–∏—Å–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã
            cursor.execute('''
                SELECT 
                    match_id, datetime, 
                    team1_id, team1_name, 0 as team1_score, 
                    team2_id, team2_name, 0 as team2_score,
                    event_name, 'upcoming' as status, 'upcoming' as match_type
                FROM upcoming_match
                WHERE (LOWER(team1_name) = LOWER(?) OR LOWER(team2_name) = LOWER(?))
                ORDER BY datetime ASC
                LIMIT 10
            ''', (team_name, team_name))
            
            upcoming_matches = cursor.fetchall()
            conn.close()
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ, –ø–æ—Ç–æ–º –ø—Ä–æ—à–µ–¥—à–∏–µ
            all_matches = list(upcoming_matches) + list(completed_matches)
            
            if not all_matches:
                await update.message.reply_text(
                    f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã '{team_name}'.",
                    reply_markup=self.markup
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
            keyboard = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞ –∏ –µ–≥–æ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'match_mapping' not in context.user_data:
                context.user_data['match_mapping'] = {}
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Å –¥–∞—Ç–∞–º–∏
            matches_list = f"<b>–ú–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã '{team_name}':</b>\n\n"
            
            # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏
            if upcoming_matches:
                matches_list += "<b>üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏:</b>\n"
                for i, match in enumerate(upcoming_matches, 1):
                    team1_name = match['team1_name']
                    team2_name = match['team2_name']
                    match_id = match['match_id']
                    match_date = datetime.fromtimestamp(match['datetime'], tz=MOSCOW_TIMEZONE).strftime('%d.%m.%Y %H:%M')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                    matches_list += f"{i}. <b>{match_date}</b>: {team1_name} vs {team2_name}\n"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
                    match_text = f"{team1_name} vs {team2_name}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    context.user_data['match_mapping'][match_text] = match_id
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    keyboard.append([KeyboardButton(match_text)])
                
                matches_list += "\n"
            
            # –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏
            if completed_matches:
                matches_list += "<b>üìä –ü—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏:</b>\n"
                for i, match in enumerate(completed_matches, 1):
                    team1_name = match['team1_name']
                    team2_name = match['team2_name']
                    team1_score = match['team1_score']
                    team2_score = match['team2_score']
                    match_id = match['match_id']
                    match_date = datetime.fromtimestamp(match['datetime'], tz=MOSCOW_TIMEZONE).strftime('%d.%m.%Y')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç—á –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
                    matches_list += f"{i}. <b>{match_date}</b>: {team1_name} {team1_score}:{team2_score} {team2_name}\n"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–∞—Ç—ã
                    match_text = f"{team1_name} {team1_score}:{team2_score} {team2_name}"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    context.user_data['match_mapping'][match_text] = match_id
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                    keyboard.append([KeyboardButton(match_text)])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard.append([KeyboardButton("–ù–∞–∑–∞–¥")])
            
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞
            await update.message.reply_text(
                matches_list,
                parse_mode="HTML"
            )
            
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ç—á–µ–π –∫–æ–º–∞–Ω–¥—ã.",
                reply_markup=self.markup
            )
    
    def get_matches_by_date(self, date_start, date_end):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            date_start (int): –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            date_end (int): –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –º–∞—Ç—á–∞–º–∏
        """
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            cursor.execute('''
                SELECT 
                    m.match_id, m.datetime, 
                    m.team1_id, m.team1_name, m.team1_score, m.team1_rank,
                    m.team2_id, m.team2_name, m.team2_score, m.team2_rank,
                    m.event_id, m.event_name
                FROM result_match m
                WHERE m.datetime BETWEEN ? AND ?
                ORDER BY m.event_id, m.datetime
            ''', (date_start, date_end))
            
            matches = cursor.fetchall()
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
            events = {}
            for match in matches:
                event_id = match['event_id']
                event_name = match['event_name']
                
                if event_id not in events:
                    events[event_id] = {
                        'name': event_name,
                        'matches': []
                    }
                
                events[event_id]['matches'].append({
                    'match_id': match['match_id'],
                    'datetime': match['datetime'],
                    'team1_id': match['team1_id'],
                    'team1_name': match['team1_name'],
                    'team1_score': match['team1_score'],
                    'team2_id': match['team2_id'],
                    'team2_name': match['team2_name'],
                    'team2_score': match['team2_score']
                })
            
            conn.close()
            return events
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥: {str(e)}")
            return {}
            
    def format_matches_message(self, events):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ç—á–∞–º–∏
        
        Args:
            events (dict): –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –º–∞—Ç—á–∞–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not events:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        
        message = ""
        
        for event_id, event_data in events.items():
            event_name = event_data['name'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            matches = event_data['matches']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            message += f"üèÜ <b>{event_name}</b>\n\n"
            
            for match in matches:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥ (–Ω–∏–∫–Ω–µ–π–º—ã)
                team1_name = match['team1_name']
                team2_name = match['team2_name']
                team1_score = match['team1_score']
                team2_score = match['team2_score']
                
                # –í—ã–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if team1_score > team2_score:
                    team1_name = f"<b>{team1_name}</b>"
                elif team2_score > team1_score:
                    team2_name = f"<b>{team2_name}</b>"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–µ–∑ ID
                message += f"‚Ä¢ <code>{team1_name}</code> {team1_score} : {team2_score} <code>{team2_name}</code>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            message += "\n"
        
        return message
    
    async def show_upcoming_matches_for_period(self, update: Update, context: ContextTypes.DEFAULT_TYPE, days=0):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            days (int): –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π (0 - —Å–µ–≥–æ–¥–Ω—è, 1 - –∑–∞–≤—Ç—Ä–∞, –∏ —Ç.–¥.)
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        
        today = datetime.now(MOSCOW_TIMEZONE)
        current_timestamp = today.timestamp()
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞
        if days == 0:  # –°–µ–≥–æ–¥–Ω—è - –±–µ—Ä–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è
            start_timestamp = current_timestamp
            end_date = datetime(today.year, today.month, today.day, 23, 59, 59, tzinfo=MOSCOW_TIMEZONE)
            end_timestamp = end_date.timestamp()
            period_text = "–Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({start_timestamp} - {end_timestamp})")
        elif days == 1:  # –ó–∞–≤—Ç—Ä–∞
            tomorrow = today + timedelta(days=1)
            start_date = datetime(tomorrow.year, tomorrow.month, tomorrow.day, 0, 0, 0, tzinfo=MOSCOW_TIMEZONE)
            end_date = datetime(tomorrow.year, tomorrow.month, tomorrow.day, 23, 59, 59, tzinfo=MOSCOW_TIMEZONE)
            start_timestamp = start_date.timestamp()
            end_timestamp = end_date.timestamp()
            period_text = f"–Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({start_date.strftime('%d.%m.%Y')})"
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ({start_timestamp} - {end_timestamp})")
        else:  # –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
            start_date = datetime(today.year, today.month, today.day, 0, 0, 0, tzinfo=MOSCOW_TIMEZONE)
            end_date = start_date + timedelta(days=days)
            start_timestamp = current_timestamp  # –° —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
            end_timestamp = end_date.timestamp()
            period_text = f"–Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ {days} –¥–Ω–µ–π"
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ {days} –¥–Ω–µ–π ({start_timestamp} - {end_timestamp})")
            
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
        events = self.get_upcoming_matches_by_date(start_timestamp, end_timestamp)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        match_count = sum(len(event_data['matches']) for event_data in events.values()) if events else 0
        self.logger.info(f"{user_info} - –ù–∞–π–¥–µ–Ω–æ {match_count} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ {period_text}</b>\n\n"
        message += self.format_upcoming_matches_message(events)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä Natus Vincere, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—É–¥—É—â–∏–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ –º–∞—Ç—á–∏ –∫–æ–º–∞–Ω–¥—ã."
        )
    
    async def send_upcoming_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É")
        await self.show_upcoming_matches_for_period(update, context, 0)
    
    def get_upcoming_matches_by_date(self, date_start, date_end):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        
        Args:
            date_start (int): –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            date_end (int): –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
            
        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –º–∞—Ç—á–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
        """
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row  # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä–µ–π
            cursor = conn.cursor()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            self.logger.info(f"–ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –∑–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç {date_start} –¥–æ {date_end}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            cursor.execute('''
                SELECT 
                    m.match_id, m.datetime, 
                    m.team1_id, m.team1_name, m.team1_rank,
                    m.team2_id, m.team2_name, m.team2_rank,
                    m.event_id, m.event_name
                FROM upcoming_match m
                WHERE m.datetime BETWEEN ? AND ?
                AND m.status = 'upcoming'
                ORDER BY m.event_id, m.datetime
            ''', (date_start, date_end))
            
            matches = cursor.fetchall()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
            self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(matches)} –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –≤ –ë–î")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
            events = {}
            for match in matches:
                event_id = match['event_id']
                event_name = match['event_name']
                
                if event_id not in events:
                    events[event_id] = {
                        'name': event_name,
                        'matches': []
                    }
                
                events[event_id]['matches'].append({
                    'match_id': match['match_id'],
                    'datetime': match['datetime'],
                    'team1_id': match['team1_id'],
                    'team1_name': match['team1_name'],
                    'team1_rank': match['team1_rank'],
                    'team2_id': match['team2_id'],
                    'team2_name': match['team2_name'],
                    'team2_rank': match['team2_rank']
                })
            
            conn.close()
            return events
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π: {str(e)}")
            return {}
    
    def format_upcoming_matches_message(self, events):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –º–∞—Ç—á–∞–º–∏
        
        Args:
            events (dict): –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –º–∞—Ç—á–∞–º–∏
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        if not events:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–∞—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
        
        message = ""
        
        for event_id, event_data in events.items():
            event_name = event_data['name'] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            matches = event_data['matches']
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            message += f"üèÜ <b>{event_name}</b>\n\n"
            
            for match in matches:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
                team1_name = match['team1_name']
                team2_name = match['team2_name']
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                match_datetime = datetime.fromtimestamp(match['datetime'], tz=MOSCOW_TIMEZONE)
                match_date = match_datetime.strftime('%d.%m')
                match_time = match_datetime.strftime('%H:%M')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –º–∞—Ç—á–µ–º
                message += f"‚Ä¢ <b>{match_date} {match_time}</b> <code>{team1_name}</code> vs <code>{team2_name}</code>\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏
            message += "\n"
        
        return message
    
    async def show_live_matches(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ live-–º–∞—Ç—á–µ–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥–ø–∏—Å–∫–∏
        """
        from src.scripts.live_matches_parser import load_json, LIVE_JSON, handle_new_subscription
        matches = load_json(LIVE_JSON, default=[])
        if not matches:
            await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç live-–º–∞—Ç—á–µ–π.", reply_markup=self.markup)
            return
        message = "<b>Live –º–∞—Ç—á–∏:</b>\n\n"
        keyboard = []
        for match in matches:
            t1 = match['team_names'][0] if match['team_names'] else '?'
            t2 = match['team_names'][1] if len(match['team_names']) > 1 else '?'
            score1 = match['current_map_scores'][0] if match['current_map_scores'] else '?'
            score2 = match['current_map_scores'][1] if len(match['current_map_scores']) > 1 else '?'
            maps1 = match['maps_won'][0] if match['maps_won'] else '0'
            maps2 = match['maps_won'][1] if len(match['maps_won']) > 1 else '0'
            match_id = match['match_id']
            match_url = match.get('match_url')
            if match_url:
                link = f' <a href="{match_url}">üåê</a>'
            else:
                link = ''
            btn_text = f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {t1} vs {t2}"
            message += f"<b>{t1}</b> ({maps1}) {score1} - {score2} ({maps2}) <b>{t2}</b>{link}\n"
            keyboard.append([InlineKeyboardButton(btn_text, callback_data=f"subscribe_live:{match_id}")])
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, parse_mode="HTML", reply_markup=reply_markup, disable_web_page_preview=True)
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        data = query.data
        user = query.from_user
        if data.startswith("subscribe_live:"):
            match_id = int(data.split(":")[1])
            from src.scripts.live_matches_parser import handle_new_subscription
            handle_new_subscription(match_id, user.id)
            await query.answer("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ live-–º–∞—Ç—á!")
            await query.edit_message_reply_markup(reply_markup=None)
        elif data == "back_to_menu":
            await query.answer()
            await self.show_menu(update, context)
    
    def run(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
        """
        self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram
        application = Application.builder().token(self.token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help))
        application.add_handler(CommandHandler("yesterday", self.send_yesterday_stats))
        application.add_handler(CommandHandler("today", self.send_today_stats))
        application.add_handler(CommandHandler("upcoming", self.send_upcoming_matches))
        application.add_handler(CommandHandler("menu", self.show_menu))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(self.handle_callback_query))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        application.run_polling(stop_signals=None)


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    bot = HLTVStatsBot(TOKEN, DB_PATH)
    bot.run()

if __name__ == "__main__":
    main() 