#!/usr/bin/env python
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV (–≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
"""

import logging
import sqlite3
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sys

from src.bots.config import load_config
from src.bots.common.base_bot import BaseHLTVBot
from src.bots.common.constants import (
    MOSCOW_TIMEZONE, MENU_UPCOMING_MATCHES, MENU_COMPLETED_MATCHES,
    DATE_FORMAT, TIME_FORMAT, DATETIME_FORMAT
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config('user_dev')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class UserDevBot(BaseHLTVBot):
    """
    –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ HLTV (–≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    """
    
    def __init__(self, token, db_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω –¥–ª—è Telegram API
            db_path (str): –ü—É—Ç—å –∫ –ë–î —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π HLTV
        """
        super().__init__(token, db_path, name="UserDevBot")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
        self.menu_keyboard = [
            [KeyboardButton(MENU_COMPLETED_MATCHES)],
            [KeyboardButton(MENU_UPCOMING_MATCHES)]
        ]
        self.markup = ReplyKeyboardMarkup(self.menu_keyboard, resize_keyboard=True)
        
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ UserDevBot –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start")
        
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV (–≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤).\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            f"/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
            f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis'), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /help")
        
        message = (
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:\n\n"
            "/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            "/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis')."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        """
        message_text = update.message.text
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π
        context.user_data['last_button'] = message_text
        
        if message_text == MENU_COMPLETED_MATCHES:
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π")
            context.user_data['showing_menu'] = MENU_COMPLETED_MATCHES
            await self.show_completed_matches(update, context)
        elif message_text == MENU_UPCOMING_MATCHES:
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π")
            context.user_data['showing_menu'] = MENU_UPCOMING_MATCHES
            await self.show_upcoming_matches(update, context)
        elif message_text == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.send_today_stats(update, context)
        elif message_text == "–ó–∞ –≤—á–µ—Ä–∞":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞")
            await self.show_matches_for_period(update, context, 1)
        elif message_text == "–ó–∞ 3 –¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ 3 –¥–Ω—è")
            await self.show_matches_for_period(update, context, 3)
        elif message_text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 0)
        elif message_text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            await self.show_upcoming_matches_for_period(update, context, 1)
        elif message_text == "–ù–∞ 3 –¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ 3 –¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 3)
        elif message_text == "–ü–æ —Å–æ–±—ã—Ç–∏—é":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
            await self.show_events_list(update, context)
        elif message_text == "–ù–∞–∑–∞–¥":
            self.logger.info(f"{user_info} - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_menu(update, context)
        elif 'match_mapping' in context.user_data and message_text in context.user_data['match_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            match_id = context.user_data['match_mapping'][message_text]
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ ID {match_id}")
            await self.show_match_details(update, context, match_id)
        elif 'event_mapping' in context.user_data and message_text in context.user_data['event_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            event_id = context.user_data['event_mapping'][message_text]
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
            await self.show_matches_for_event(update, context, event_id)
        elif "(" in message_text and ")" in message_text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å ID –≤ —Å–∫–æ–±–∫–∞—Ö
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Ç—á–∞ –∏–∑ —Å–∫–æ–±–æ–∫
                match_id_text = message_text.split("(")[-1].split(")")[0].strip()
                match_id = int(''.join(filter(str.isdigit, match_id_text)))
                await self.show_match_details(update, context, match_id)
            except (ValueError, IndexError):
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞.",
                    reply_markup=self.markup
                )
        else:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            await self.find_matches_by_team(update, context, message_text)
    
    async def show_match_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, match_id):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            match_id (int): ID –º–∞—Ç—á–∞
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ ID {match_id}")
        
        try:
            conn = sqlite3.connect(self.db_path)
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π
            cursor.execute('''
                SELECT 
                    m.match_id, m.datetime, 
                    m.team1_id, m.team1_name, m.team1_score, m.team1_rank,
                    m.team2_id, m.team2_name, m.team2_score, m.team2_rank,
                    m.event_id, m.event_name, m.demo_id, 'completed' as match_type
                FROM match_details m
                WHERE m.match_id = ?
            ''', (match_id,))
            
            match = cursor.fetchone()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
            if not match:
                cursor.execute('''
                    SELECT 
                        m.match_id, m.datetime, 
                        m.team1_id, m.team1_name, 0 as team1_score, m.team1_rank,
                        m.team2_id, m.team2_name, 0 as team2_score, m.team2_rank,
                        m.event_id, m.event_name, NULL as demo_id, 'upcoming' as match_type
                    FROM match_upcoming m
                    WHERE m.match_id = ?
                ''', (match_id,))
                
                match = cursor.fetchone()
            
            if not match:
                await update.message.reply_text(
                    f"–ú–∞—Ç—á —Å ID {match_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                    reply_markup=self.markup
                )
                conn.close()
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—à–µ–¥—à–∏–π –º–∞—Ç—á
            player_stats = []
            match_type = match['match_type']
            
            if match_type == 'completed':
                # –î–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
                cursor.execute('''
                    SELECT 
                        p.nickname, p.team_id, p.kills, p.deaths, 
                        p.kd_ratio, p.adr, p.kast, p.rating
                    FROM player_stats p
                    WHERE p.match_id = ?
                    ORDER BY p.team_id, p.rating DESC
                ''', (match_id,))
                
                player_stats = cursor.fetchall()
            elif match_type == 'upcoming':
                # –î–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –ø–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥
                cursor.execute('''
                    SELECT 
                        p.player_nickname as nickname, p.team_id
                    FROM match_upcoming_players p
                    WHERE p.match_id = ?
                    ORDER BY p.team_id
                ''', (match_id,))
                
                player_stats = cursor.fetchall()
            
            conn.close()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
            match_datetime = datetime.fromtimestamp(match['datetime'], tz=MOSCOW_TIMEZONE).strftime('%d.%m.%Y %H:%M')
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
            team1_name = match['team1_name']
            team2_name = match['team2_name']
            
            message = f"<b>‚è∞ {match_datetime}</b>\n"
            message += f"<b>üèÜ {match['event_name']}</b>\n\n"
            
            if match_type == 'completed':
                team1_score = match['team1_score']
                team2_score = match['team2_score']
                
                # –í—ã–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                if team1_score > team2_score:
                    team1_name = f"üèÜ <b>{team1_name}</b>"
                    team2_name = f"{team2_name}"
                elif team2_score > team1_score:
                    team1_name = f"{team1_name}"
                    team2_name = f"<b>{team2_name}</b>"
                    
                message += f"{team1_name} {team1_score} : {team2_score} {team2_name}\n\n"
            else:  # upcoming
                message += f"<b>{team1_name} vs {team2_name}</b>\n\n"
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–æ–º–∞–Ω–¥
            if match['team1_rank'] or match['team2_rank']:
                team1_rank = f"#{match['team1_rank']}" if match['team1_rank'] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                team2_rank = f"#{match['team2_rank']}" if match['team2_rank'] else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                message += f"–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–∞–Ω–¥:\n{team1_rank} - {match['team1_name']}\n{team2_rank} - {match['team2_name']}\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º head-to-head —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if match_type == 'upcoming' and hasattr(match, 'head_to_head_team1_wins') and hasattr(match, 'head_to_head_team2_wins'):
                if match['head_to_head_team1_wins'] is not None and match['head_to_head_team2_wins'] is not None:
                    message += f"<b>–ò—Å—Ç–æ—Ä–∏—è –≤—Å—Ç—Ä–µ—á:</b>\n"
                    message += f"{match['team1_name']}: {match['head_to_head_team1_wins']} –ø–æ–±–µ–¥\n"
                    message += f"{match['team2_name']}: {match['head_to_head_team2_wins']} –ø–æ–±–µ–¥\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –¥–µ–º–æ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
            if match_type == 'completed' and match['demo_id']:
                demo_url = f"https://www.hltv.org/download/demo/{match['demo_id']}"
                message += f"<b>üì• <a href='{demo_url}'>–°–∫–∞—á–∞—Ç—å Demo –∏–≥—Ä—ã</a></b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
            team1_players = [p for p in player_stats if p['team_id'] == match['team1_id']]
            team2_players = [p for p in player_stats if p['team_id'] == match['team2_id']]
            
            if match_type == 'completed' and (team1_players or team2_players):
                message += "<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
                
                if team1_players:
                    message += f"<b>{match['team1_name']}:</b>\n"
                    message += "<pre>\n"
                    message += "–ò–≥—Ä–æ–∫        K-D   K/D  ADR KAST Rating\n"
                    message += "----------------------------------------\n"
                    
                    for player in team1_players:
                        nick = player['nickname']
                        if len(nick) > 12:
                            nick = nick[:9] + "..."
                            
                        kd = f"{player['kills'] or 0}-{player['deaths'] or 0}"
                        kd_ratio = f"{player['kd_ratio']:.2f}" if player['kd_ratio'] else "0.00"
                        adr = f"{player['adr']:.1f}" if player['adr'] else "0.0"
                        kast = f"{player['kast']*100:.0f}%" if player['kast'] else "0%"
                        rating = f"{player['rating']:.2f}" if player['rating'] else "0.00"
                        
                        message += f"{nick.ljust(12)} {kd.ljust(5)} {kd_ratio.ljust(4)} {adr.ljust(3)} {kast.ljust(4)} {rating}\n"
                    
                    message += "</pre>\n\n"
                
                if team2_players:
                    message += f"<b>{match['team2_name']}:</b>\n"
                    message += "<pre>\n"
                    message += "–ò–≥—Ä–æ–∫        K-D   K/D  ADR KAST Rating\n"
                    message += "----------------------------------------\n"
                    
                    for player in team2_players:
                        nick = player['nickname']
                        if len(nick) > 12:
                            nick = nick[:9] + "..."
                            
                        kd = f"{player['kills'] or 0}-{player['deaths'] or 0}"
                        kd_ratio = f"{player['kd_ratio']:.2f}" if player['kd_ratio'] else "0.00"
                        adr = f"{player['adr']:.1f}" if player['adr'] else "0.0"
                        kast = f"{player['kast']*100:.0f}%" if player['kast'] else "0%"
                        rating = f"{player['rating']:.2f}" if player['rating'] else "0.00"
                        
                        message += f"{nick.ljust(12)} {kd.ljust(5)} {kd_ratio.ljust(4)} {adr.ljust(3)} {kast.ljust(4)} {rating}\n"
                    
                    message += "</pre>\n"
            elif match_type == 'upcoming' and (team1_players or team2_players):
                message += "<b>üë• –û–∂–∏–¥–∞–µ–º—ã–µ —Å–æ—Å—Ç–∞–≤—ã:</b>\n\n"
                
                if team1_players:
                    message += f"<b>{match['team1_name']}:</b>\n"
                    for player in team1_players:
                        message += f"‚Ä¢ {player['nickname']}\n"
                    message += "\n"
                
                if team2_players:
                    message += f"<b>{match['team2_name']}:</b>\n"
                    for player in team2_players:
                        message += f"‚Ä¢ {player['nickname']}\n"
            else:
                message += "<i>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Å—Ç–∞–≤–∞—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞.</i>"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message, parse_mode="HTML", reply_markup=self.markup)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ {match_id}: {str(e)}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–µ.",
                reply_markup=self.markup
            )
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è user_bot
    # –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ user_bot –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏
from src.bots.user_bot.telegram_bot import HLTVStatsBot

# –ù–∞—Å–ª–µ–¥—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –±–æ—Ç–∞ HLTV
for method_name in dir(HLTVStatsBot):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã, –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if (not method_name.startswith('_') or method_name == '_get_safe_user_info') and method_name not in dir(UserDevBot):
        setattr(UserDevBot, method_name, getattr(HLTVStatsBot, method_name))