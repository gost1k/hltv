#!/usr/bin/env python
"""
–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV (–≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
"""

import logging
import sqlite3
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import sys

from src.bots.config import load_config
from src.bots.common.base_bot import BaseHLTVBot
from src.bots.common.constants import (
    MOSCOW_TIMEZONE, MENU_UPCOMING_MATCHES, MENU_COMPLETED_MATCHES,
    DATE_FORMAT, TIME_FORMAT, DATETIME_FORMAT
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config('user_dev')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

class UserDevBot(BaseHLTVBot):
    """
    –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ HLTV (–≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)
    """
    
    def __init__(self, token, db_path):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token (str): –¢–æ–∫–µ–Ω –¥–ª—è Telegram API
            db_path (str): –ü—É—Ç—å –∫ –ë–î —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π HLTV
        """
        super().__init__(token, db_path, name="UserDevBot")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
        self.menu_keyboard = [
            [KeyboardButton(MENU_COMPLETED_MATCHES)],
            [KeyboardButton(MENU_UPCOMING_MATCHES)]
        ]
        self.markup = ReplyKeyboardMarkup(self.menu_keyboard, resize_keyboard=True)
        
        self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ UserDevBot –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /start")
        
        message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            f"–Ø –±–æ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–µ–π HLTV (–≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤).\n\n"
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            f"/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            f"/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            f"/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n\n"
            f"–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis'), —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ—ë –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã /help")
        
        message = (
            "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:\n\n"
            "/yesterday - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å\n"
            "/today - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/upcoming - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –º–∞—Ç—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
            "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ç—á–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã, –≤–≤–µ–¥–∏—Ç–µ –µ—ë —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —á–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'NAVI' –∏–ª–∏ 'Astralis')."
        )
        await update.message.reply_text(message, reply_markup=self.markup)
    
    async def show_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        """
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –í—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.markup
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        """
        message_text = update.message.text
        user = update.effective_user
        user_info = self._get_safe_user_info(user)
        self.logger.info(f"{user_info} - –°–æ–æ–±—â–µ–Ω–∏–µ: '{message_text}'")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏–π
        context.user_data['last_button'] = message_text
        
        if message_text == MENU_COMPLETED_MATCHES:
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–¥—à–∏—Ö –º–∞—Ç—á–µ–π")
            context.user_data['showing_menu'] = MENU_COMPLETED_MATCHES
            await self.show_completed_matches(update, context)
        elif message_text == MENU_UPCOMING_MATCHES:
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π")
            context.user_data['showing_menu'] = MENU_UPCOMING_MATCHES
            await self.show_upcoming_matches(update, context)
        elif message_text == "–ó–∞ —Å–µ–≥–æ–¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.send_today_stats(update, context)
        elif message_text == "–ó–∞ –≤—á–µ—Ä–∞":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ –≤—á–µ—Ä–∞")
            await self.show_matches_for_period(update, context, 1)
        elif message_text == "–ó–∞ 3 –¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π –∑–∞ 3 –¥–Ω—è")
            await self.show_matches_for_period(update, context, 3)
        elif message_text == "–ù–∞ —Å–µ–≥–æ–¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 0)
        elif message_text == "–ù–∞ –∑–∞–≤—Ç—Ä–∞":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
            await self.show_upcoming_matches_for_period(update, context, 1)
        elif message_text == "–ù–∞ 3 –¥–Ω—è":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π –Ω–∞ 3 –¥–Ω—è")
            await self.show_upcoming_matches_for_period(update, context, 3)
        elif message_text == "–ü–æ —Å–æ–±—ã—Ç–∏—é":
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
            await self.show_events_list(update, context)
        elif message_text == "–ù–∞–∑–∞–¥":
            self.logger.info(f"{user_info} - –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            await self.show_menu(update, context)
        elif 'match_mapping' in context.user_data and message_text in context.user_data['match_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–∞—Ç—á–∞ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            match_id = context.user_data['match_mapping'][message_text]
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Ç—á–∞ ID {match_id}")
            await self.show_match_details(update, context, match_id)
        elif 'event_mapping' in context.user_data and message_text in context.user_data['event_mapping']:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
            event_id = context.user_data['event_mapping'][message_text]
            self.logger.info(f"{user_info} - –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π —Å–æ–±—ã—Ç–∏—è ID {event_id}")
            await self.show_matches_for_event(update, context, event_id)
        elif "(" in message_text and ")" in message_text:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å ID –≤ —Å–∫–æ–±–∫–∞—Ö
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–∞—Ç—á–∞ –∏–∑ —Å–∫–æ–±–æ–∫
                match_id_text = message_text.split("(")[-1].split(")")[0].strip()
                match_id = int(''.join(filter(str.isdigit, match_id_text)))
                await self.show_match_details(update, context, match_id)
            except (ValueError, IndexError):
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –º–∞—Ç—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç—á–∞.",
                    reply_markup=self.markup
                )
        else:
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            await self.find_matches_by_team(update, context, message_text)
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞, –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è user_bot
    # –í —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ user_bot –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–∏
from src.bots.user_bot.telegram_bot import HLTVStatsBot

# –ù–∞—Å–ª–µ–¥—É–µ–º –º–µ—Ç–æ–¥—ã –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ –±–æ—Ç–∞ HLTV
for method_name in dir(HLTVStatsBot):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã, –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
    if (not method_name.startswith('_') or method_name == '_get_safe_user_info') and method_name not in dir(UserDevBot):
        setattr(UserDevBot, method_name, getattr(HLTVStatsBot, method_name))